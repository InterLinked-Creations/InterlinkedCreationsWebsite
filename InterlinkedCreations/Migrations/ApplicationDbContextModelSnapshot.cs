// <auto-generated />
using System;
using InterlinkedCreations.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterlinkedCreations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InterlinkedCreations.Models.Conversation", b =>
                {
                    b.Property<int>("ConversationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationID"));

                    b.Property<string>("ConversationLogo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConversationTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Members")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConversationID");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("InterlinkedCreations.Models.ConversationData", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("Attachment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ConversationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reactions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Reply")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("MessageID");

                    b.HasIndex("ConversationID");

                    b.HasIndex("Reply");

                    b.HasIndex("SenderID");

                    b.ToTable("ConversationData");
                });

            modelBuilder.Entity("InterlinkedCreations.Models.Friend", b =>
                {
                    b.Property<int>("FriendshipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendshipID"));

                    b.Property<int>("User1")
                        .HasColumnType("int");

                    b.Property<int>("User2")
                        .HasColumnType("int");

                    b.HasKey("FriendshipID");

                    b.HasIndex("User2");

                    b.HasIndex("User1", "User2")
                        .IsUnique();

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("InterlinkedCreations.Models.Invite", b =>
                {
                    b.Property<int>("InviteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InviteID"));

                    b.Property<int>("FromUser")
                        .HasColumnType("int");

                    b.Property<int>("ToUser")
                        .HasColumnType("int");

                    b.HasKey("InviteID");

                    b.HasIndex("FromUser");

                    b.HasIndex("ToUser");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("InterlinkedCreations.Models.Mail", b =>
                {
                    b.Property<int>("MailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailID"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecieverID")
                        .HasColumnType("int");

                    b.Property<decimal>("SenderID")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("MailID");

                    b.HasIndex("RecieverID");

                    b.ToTable("Mails");
                });

            modelBuilder.Entity("InterlinkedCreations.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Gems")
                        .HasColumnType("bigint");

                    b.Property<long>("Gold")
                        .HasColumnType("bigint");

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<long>("Silver")
                        .HasColumnType("bigint");

                    b.Property<long>("Stars")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InterlinkedCreations.Models.ConversationData", b =>
                {
                    b.HasOne("InterlinkedCreations.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterlinkedCreations.Models.ConversationData", "ReplyToMessage")
                        .WithMany("Replies")
                        .HasForeignKey("Reply")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InterlinkedCreations.Models.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("ReplyToMessage");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("InterlinkedCreations.Models.Friend", b =>
                {
                    b.HasOne("InterlinkedCreations.Models.User", "User1Navigation")
                        .WithMany("FriendsAsUser1")
                        .HasForeignKey("User1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterlinkedCreations.Models.User", "User2Navigation")
                        .WithMany("FriendsAsUser2")
                        .HasForeignKey("User2")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User1Navigation");

                    b.Navigation("User2Navigation");
                });

            modelBuilder.Entity("InterlinkedCreations.Models.Invite", b =>
                {
                    b.HasOne("InterlinkedCreations.Models.User", "FromUserNavigation")
                        .WithMany("InvitesSent")
                        .HasForeignKey("FromUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterlinkedCreations.Models.User", "ToUserNavigation")
                        .WithMany("InvitesReceived")
                        .HasForeignKey("ToUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromUserNavigation");

                    b.Navigation("ToUserNavigation");
                });

            modelBuilder.Entity("InterlinkedCreations.Models.Mail", b =>
                {
                    b.HasOne("InterlinkedCreations.Models.User", "Receiver")
                        .WithMany("MailsReceived")
                        .HasForeignKey("RecieverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("InterlinkedCreations.Models.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("InterlinkedCreations.Models.ConversationData", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("InterlinkedCreations.Models.User", b =>
                {
                    b.Navigation("FriendsAsUser1");

                    b.Navigation("FriendsAsUser2");

                    b.Navigation("InvitesReceived");

                    b.Navigation("InvitesSent");

                    b.Navigation("MailsReceived");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
